# git is a software that is used to track changes to your file
# github is a online service that host git 

-----------------------------------------------------------------------------
repo | folder | directory are same (collection of files)

--> git --version  # to check version of git
--> git status # to check status i.e which is tracked or which is not 

------------------------------------------------------------------------------
to save your own username and email so git can track who is the owner of the current project. it basically save our details in config file

--> git config --global user.email "anuragsingh17ai@gmail.com" #adding email address globally
--> git config --global user.name "anuragsingh17ai" #adding username globally: 

--> git config --list #to check list of users : 

--------------------------------------------------------------------------------
to initialize repo

--> git status # checking current status of repo
--> git init # initialize repo ,by default it is done in master branch
--> git add <file1> <file2>  # stagging file that means which file changes are to be comitted in repo
--> git add . # alternative to above command . it will stage all files so not need to specifically mention
--> git status # checking current status to find which files are staged. not menditory but good practice
--> git rm --cached <file1> <file2> # this is used to unstage
--> git commit -m "message" # this file change staged file in local repo with the message

---> git log # to find logging history 
---> git log  --online # to see logs in online

---------------------------------------------------------------------------------------
in .gitignore we keep those file that are not needed to be tracked
in .gitkeep  we add file that are to be tracked even if the folder is empty as git doesnot track empty folders

----------------------------------------------------------------------------------
branching 

--> git branch # check all branch of current repo
--> git branch <name of new branch>  # create a new branch other than master branch
--> git switch <name of new branch> # switch to other branch
--> git logs # histoy or logging details 
--> git switch -c <name of branch> # it will create new branch if not exist then move to that branch basically it combine git branch <name> and git switch <name>
--> git checkout <name of branch> # it will check whether the branch exist or not. if exist then move to that branch else error

------------------------------------------------------------------------------------
merging

--> git checkout <branch name> # move to branch where we have to merge other branch
--> git merge <branch name> # it will merge branch name to current branch  but it doesn't means branch name will be destroyed it only means changes in branch code will merge to other branch
--> git merge --abort # to abort merge in case of conflict

-------------------------------------------------------------------------------
rename a branch 

--> git branch -m <old-branch-name> <new-branch-name> # rename any branch
--> git branch -m <new-name-of-current-branch>        # rename current branch

delete  a branch 

--> git branch -d <branch-name>

-------------------------------------------------------------------------------
finding difference

--> git diff --staged # to find info about stagged 
--> git diff <branch-name-one> <branch-name-two> # to find info about two branches
or 
--> git diff <branch-one>..<branch-two>

-------------------------------------------------------------------------------
stash
saving on temprorary storage . we cannot shift branch without stagging/commiting changes of current branch as changes will get deleted if not stagged/commited
so we can save these changes on temprorary storage than we can chage our branch 

--> git stash # save work on temprorary storage
--> git stash save "work in progress on X feature" # save work on temprorary storage with a name basically just on alternative of above command
--> git stash list # to see list of stash 
--> git stash apply # move changes to permanent location
--> git stash apply stash@{0} # to move particular stash to permanent location here 0 is 0 is stash no. as stash are stored in form of stach with numbering you can see it using stash list so just change 0 to no. of stash you want to apply
--> git stash pop   # apply and remove stash 
--> git stash apply stash@{0} <branch-name> # apply a particular stash to  a particular branch 
--> git stash clear # to remove stash

-------------------------------------------------------------------------------------------------
Tags are a way to mark a specific point in your repository. They are useful when you want ot remember a specific version of your code or when you want to refer to a specific
commit. Tags are like sticky notes that you can attach to your commit 

--> git tag <tag-name> #tag will attach to current commit 
--> git tag -a <tag-name> -m "Release 1.0" # create an annotated tag with the specific name and message 
--> git tag <tag-name> <commit-hash> # taging a specific commit 
--> git push origin <tag-name> #push tags to remote repo 
--> git tag -d <tag-name> #delete a tag

---------------------------------------------------------------------------------------------------
git rebase changing base of current branch . It is always done on sub branch not main branch

--> git checkout < branch name> 
--> git rebase master 

----------------------------------------------------------------------------------------------------
git reflog shows you the history of your commits / aur to reset your code 

--> git reflog 
--> git reset --hard <commit-hash> # this help to move back to a code of a particular commit . you can find hash with git reflog or git log 
or 
--> git reset --hard HEAD@{1} # to move one commit back . Here no. represent to how much commit back you wanna move 

---------------------------------------------------------------------------------------------------------------------------------------------
generate ssh key and add to github . You can generate a new SSH key on your local machine. 
After you generate the key, you can add the public key to your account on GitHub.com to enable authentication for Git operations over SSH.

ssh-keygen -t ed25519 -C "email_adress"


------------------------------------------------------------------------------------------------------------------------------------------------
pushing on gihub 

--> git branch -m main  # change current branch name to main. 
--> git remote -v # display the urls of remote repo that are associated to local repo 
--> git remote add origin <link-of-remote-repo.git> # here origin is the name of remote url where it is to be pushed .you can name it anything else but origin is common
--> git push -u origin main